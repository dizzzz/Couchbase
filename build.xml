<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="couchbase">

    <description>Build descriptor for the eXist-db Couchbase extension</description>

    <property file="local.build.properties"/>
    <property file="build.properties"/>

    <property name="build.dir" value="build"/>
    <property name="build.libs" value="${build.dir}/lib"/>
    <property name="build.config" value="${build.dir}/config"/>
    <property name="build.javadoc" value="${build.dir}/javadoc"/>
    <property name="dist.dir" value="dist"/>

    <property name="java.src" value="java/src"/>
    <property name="java.classes" value="${build.dir}/classes"/>
    <property name="java.libs" value="java/lib"/>
    <property name="java.test.src" value="java/test/src"/>
    <property name="java.test.classes" value="${build.dir}/test/classes"/>
    
    <property name="junit.results.dir" value="${build.dir}/test/junit"/>
    <property name="jacoco.results.dir" value="${build.dir}/test/jacoco"/>
    
    <property name="web.dir" value="web"/>
    <property name="config.dir" value="config"/>

    <!-- 
        Setup build path 
    -->
    <path id="classpath">
        <fileset dir="${exist.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${exist.dir}/lib/core">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${exist.dir}/lib/optional">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${exist.dir}/tools/jetty/lib">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${java.libs}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="classpath.test">
        <path refid="classpath"/>
        <fileset dir="${exist.dir}/lib/test">
            <include name="junit*jar"/>
        </fileset>
        <fileset dir="${exist.dir}/tools/ant/lib">
            <include name="*junit4*jar"/>
        </fileset>
        <pathelement path="${exist.dir}/test/classes"/>
        <pathelement  location="${exist.dir}/test/classes"/>
    </path>


    <!-- 
        Download required libraries 
    -->
    <target name="setup" description="Download the Ivy dependency manager">

        <mkdir dir="${build.libs}"/>

        <echo>Ivy</echo>
        <get src="${ivy_url}" dest="${build.libs}"/>

        <echo>Jacoco</echo>
        <get src="${jacoco_ant}" dest="${build.libs}"/>
        <get src="${jacoco_core}" dest="${build.libs}"/>
        <get src="${jacoco_report}" dest="${build.libs}"/>
        <get src="${jacoco_agent}" dest="${build.libs}"/>

    </target>

    <!-- 
        Be sure the 'setup' task has been executed first 
    -->
    <target name="download" description="Download 3d party JAR files" xmlns:ivy="antlib:org.apache.ivy.ant">

        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant">
            <classpath>
                <fileset dir="${build.libs}">
                    <include name="ivy*.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <ivy:retrieve sync="true" pattern="${java.libs}/[artifact]-[revision](-[classifier]).[ext]"/>
    </target>

    <!-- 
        Test suite 
    -->
    <target name="test" description="Run tests" xmlns:jacoco="antlib:org.jacoco.ant">
        
        <mkdir dir="${junit.results.dir}"/>
        <mkdir dir="${jacoco.results.dir}"/>
        
        
        <taskdef resource="org/jacoco/ant/antlib.xml" uri="antlib:org.jacoco.ant">
            <classpath>
                <fileset dir="${build.libs}">
                    <include name="org.jacoco.**.jar"/>
                </fileset>
            </classpath>
        </taskdef>

        <taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask">
            <classpath refid="classpath.test"/>
        </taskdef>
        
        <jacoco:coverage destfile="${jacoco.results.dir}/jacoco.exec">
        <junit fork="true" showoutput="true" printsummary="yes">
            
            <sysproperty key="exist.home" value="${exist.dir}"/>
            
            <formatter type="plain"/>
            <classpath>    
                <pathelement  location="${java.test.classes}"/> 
                <path refid="classpath.test"></path>
                <path refid="classpath"></path>
                <fileset dir="${exist.dir}/lib">
                    <include name="**/*jar"/>
                </fileset>
                <fileset dir="${exist.dir}/lib">
                    <include name="**/*jar"/>
                </fileset>
                <fileset dir="${exist.dir}/extensions/">
                    <include name="**/*jar"/>
                </fileset>
                <fileset dir="${exist.dir}/tools/aspectj">
                    <include name="**/*jar"/>
                </fileset>
                <fileset dir="${exist.dir}/tools/ant/lib">
                    <include name="*unit*jar"/>
                </fileset>
                <!-- <fileset dir="${exist.dir}/tools/jetty/lib">
                    <include name="*jar"/>
                </fileset> -->
            </classpath>
            <batchtest fork="yes" todir="${junit.results.dir}">
              <fileset dir="${java.test.src}">
                <include name="**/*Tests.java"/>
              </fileset>
            </batchtest>
            
        </junit>
        </jacoco:coverage>
        
        <!-- <jacoco:report>

            <executiondata>
                <file file="${jacoco.results.dir}/jacoco.exec"/>
            </executiondata>

            <structure name="Example Project">
                <classfiles>
                    <fileset dir="${java.classes}"/>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${java.src}"/>
                </sourcefiles>
            </structure>

            <html destdir="${jacoco.results.dir}/html"/>

        </jacoco:report> -->
        

    </target>

    <!-- 
        Process configuration directory
    -->
    <target name="process" description="Process template files">
        <copy todir="${build.config}">
            <fileset dir="${config.dir}"/>
            <filterset>
                <filter token="VERSION" value="${module.version}"/>
                <filter token="TITLE" value="${module.title}"/>
            </filterset>
        </copy>
    </target>

    <target name="prepare" depends="process" description="Create empty directories">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.libs}"/>
        <mkdir dir="${build.config}"/>
        <mkdir dir="${java.classes}"/>
        <mkdir dir="${java.libs}"/>
        <mkdir dir="${java.test.classes}"/>
    </target>

    <target name="clean" description="Clean up all generated files">
        <delete dir="${build.dir}" includes="*.jar"/>
        <delete dir="${build.dir}/classes"/>
        <delete dir="${build.config}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="clean-all" depends="clean" description="Reset to clean state">
        <delete dir="${build.dir}"/>
        <delete dir="${java.libs}"/>
    </target>

    <target name="compile" depends="prepare,download" description="Compile java sources">
        <javac srcdir="${java.src}" destdir="${java.classes}" optimize="true" debug="true" target="${javac.target}"
            source="${javac.source}" includeantruntime="false">
            <classpath>
                <path refid="classpath"/>
            </classpath>
            <!-- 
				<compilerarg value="-Xlint:unchecked"/>
				<compilerarg value="-Xlint:deprecation"/>
				<compilerarg value="-Xlint"/> 
			-->
        </javac>

        <javac srcdir="${java.test.src}" destdir="${java.test.classes}" optimize="true" debug="true"
            target="${javac.target}" source="${javac.source}" includeantruntime="false">
            <classpath>
                <path refid="classpath.test"/>
            </classpath>
            <!-- 
				<compilerarg value="-Xlint:unchecked"/>
				<compilerarg value="-Xlint:deprecation"/>
				<compilerarg value="-Xlint"/> 
			-->
        </javac>
    </target>

    <target name="rebuild" depends="clean,xar" description="Clean and build XAR files"/>

    <target name="jar" depends="compile" description="Create JAR file">
        <jar basedir="${java.classes}" jarfile="${build.dir}/exist-${module.name}-${module.version}.jar">
            <manifest>
                <attribute name="Project-Name" value="${module.name}"/>
                <attribute name="Project-Version" value="${module.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
            </manifest>
        </jar>
    </target>

    <!-- 
        Create Javadoc documentation
    -->
    <target name="javadoc" depends="prepare" description="Generate Javadocs">
        <mkdir dir="${build.javadoc}"/>
        <javadoc sourcepath="${java.src}" destdir="${build.javadoc}" classpathref="classpath">
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
            <link href="http://docs.oracle.com/javaee/7/api/"/>
            <link href="http://exist-db.org/exist/api/"/>
            <link href="http://xmldb.exist-db.org/javadoc"/>
        </javadoc>
        <jar basedir="${build.javadoc}" jarfile="${build.dir}/exist-${module.name}-${module.version}-javadoc.jar">
            <manifest>
                <attribute name="Project-Name" value="${module.name}"/>
                <attribute name="Project-Version" value="${module.version}"/>
                <attribute name="Project-Build" value="${DSTAMP}"/>
            </manifest>
        </jar>
    </target>

    <target name="xar" depends="jar" description="Create XAR files">

        <!-- create web application -->
        <!--
        <zip destfile="${dist.dir}/${module.name}-ui-${module.version}.xar">
            <fileset dir="${web.dir}"/>
            <zipfileset dir="${build.config}/application" includes="*.xml"/>
        </zip>
        -->

        <!-- create library -->
        <zip destfile="${dist.dir}/${module.name}-core-${module.version}.xar">
            <zipfileset dir="${build.dir}" includes="*.jar" prefix="content"/>
            <zipfileset dir="${java.libs}" prefix="content">
                <include name="*.jar"/>
                <exclude name="*-javadoc.jar"/>
                <exclude name="*-sources.jar"/>
            </zipfileset>
            <zipfileset dir="${build.config}/library" includes="*.xml"/>
        </zip>
    </target>

    <target name="install" description="Install jar files into ${exist.dir}/lib/extensions">
        <copy file="${build.dir}/exist-${module.name}-${module.version}.jar" todir="${exist.dir}/lib/user"/>

        <copy todir="${exist.dir}/lib/user">
            <fileset dir="${java.libs}" includes="*.jar" excludes="*sources*,*javadoc*"/>
        </copy>
    </target>

</project>
